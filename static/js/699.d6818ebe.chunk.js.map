{"version":3,"file":"static/js/699.d6818ebe.chunk.js","mappings":"kNACe,SAASA,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IAEIE,EAAKC,EAFLC,EAAS,CAAC,EACVC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,CACT,CDVe,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,GAEzB,CAEA,OAAOE,CACT,C,iDELA,EAVkB,SAAC,GAAuC,IAArCW,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,aAAiBC,EAAY,OACjDC,GAAKC,EAAAA,EAAAA,UAAQ,kBCeD,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDfOG,EAAN,GAAgB,IACnC,OACE,4BACE,kBAAOC,QAASX,EAAhB,SAAqBH,KACrB,0BAAOG,GAAIA,EAAIY,SAAUd,GAAkBC,MAGhD,EEPD,EAJe,SAAC,GAAmC,IAAjCc,EAAgC,EAAhCA,SAAgC,IAAtBC,KAAAA,OAAsB,MAAf,SAAe,EAChD,OAAO,mBAAQA,KAAMA,EAAd,SAAqBD,GAC7B,E,kBCoBD,EApBgB,SAAC,GAAgC,IAA9BE,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC/B,GAA0BC,EAAAA,EAAAA,WAAS,UAAKF,IAAxC,eAAOG,EAAP,KAAcC,EAAd,KAgBA,MAAO,CAAED,MAAAA,EAAOC,SAAAA,EAAUrB,aAdL,SAAC,GAAuB,IAArBsB,EAAoB,EAApBA,cACdC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAEdH,GAAS,SAAAI,GACP,OAAO,kBAAKA,GAAZ,cAAwBF,EAAOC,GAChC,GACF,EAQuCE,aANnB,SAAAC,GACnBA,EAAMC,iBACNV,GAAS,UAAKE,IACdC,GAAS,UAAKJ,GACf,EAGF,ECdD,EANqB,CACnBM,KAAM,GACNM,MAAO,GACPC,SAAU,ICqBZ,EAxBe,CACbP,KAAM,CACJP,KAAM,OACNO,KAAM,OACNQ,UAAU,EACVhC,MAAO,YACPiC,YAAa,aAEfH,MAAO,CACLb,KAAM,QACNO,KAAM,QACNQ,UAAU,EACVhC,MAAO,aACPiC,YAAa,cAEfF,SAAU,CACRd,KAAM,WACNO,KAAM,WACNQ,UAAU,EACVhC,MAAO,gBACPiC,YAAa,kBCSjB,EArBqB,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SACtB,EAA8Ce,EAAQ,CACpDhB,aAAAA,EACAC,SAAAA,IAFME,EAAR,EAAQA,MAAOpB,EAAf,EAAeA,aAAc0B,EAA7B,EAA6BA,aAIrBH,EAA0BH,EAA1BG,KAAMM,EAAoBT,EAApBS,MAAOC,EAAaV,EAAbU,SAErB,OACE,kBAAMZ,SAAUQ,EAAhB,WACE,SAAC,GAAD,QAAWF,MAAOD,EAAMvB,aAAcA,GAAkBkC,EAAAA,QACxD,SAAC,GAAD,QAAWV,MAAOK,EAAO7B,aAAcA,GAAkBkC,EAAAA,SACzD,SAAC,GAAD,QACEV,MAAOM,EACP9B,aAAcA,GACVkC,EAAAA,YAEN,SAAC,EAAD,yBAGL,ECXD,EAVqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OAAO,SAAC,EAAD,CAAclB,SAJA,SAAAmB,GACnBF,GAASG,EAAAA,EAAAA,GAAOD,GACjB,GAGF,C","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","shared/components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","shared/components/Button/Button.jsx","shared/hooks/useForm.js","modules/RegisterForm/initialState.js","modules/RegisterForm/fields.js","modules/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} onChange={handleChange} {...props} />\n    </div>\n  );\n};\n\nexport default TextField;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","const Button = ({ children, type = 'submit' }) => {\n  return <button type={type}>{children}</button>;\n};\n\nexport default Button;\n","import { useState } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ currentTarget }) => {\n    const { name, value } = currentTarget;\n\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    required: true,\n    label: 'User name',\n    placeholder: 'User name',\n  },\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","import TextField from 'shared/components/TextField/TextField';\nimport Button from 'shared/components/Button/Button';\n\nimport useForm from 'shared/hooks/useForm';\n\nimport initialState from './initialState';\nimport fields from './fields';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { name, email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField value={name} handleChange={handleChange} {...fields.name} />\n      <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n      />\n      <Button>Register</Button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import { useDispatch } from 'react-redux';\n\nimport { signup } from 'redux/auth/auth-operations';\n\nimport RegisterForm from 'modules/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSignup = data => {\n    dispatch(signup(data));\n  };\n\n  return <RegisterForm onSubmit={handleSignup} />;\n};\n\nexport default RegisterPage;\n"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","label","handleChange","props","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","onChange","children","type","initialState","onSubmit","useState","state","setState","currentTarget","name","value","prevState","handleSubmit","event","preventDefault","email","password","required","placeholder","useForm","fields","dispatch","useDispatch","data","signup"],"sourceRoot":""}